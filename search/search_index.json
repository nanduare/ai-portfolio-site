{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hi, I'm Are Nanda Kishore \ud83d\udc4b","text":"<p>AI/ML Engineer and MS in AI (Indiana Wesleyan University), focused on machine learning algorithms, databases, pipelines, and networking. I build production-grade ML systems with measurable impact.</p> <ul> <li>Email: nandyyy66@gmail.com</li> <li>GitHub: github.com/nanduare</li> <li>LinkedIn: linkedin.com/in/NandaKishore06</li> <li>Resume: PDF</li> </ul>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>Real-time IDS pipeline (Kafka \u2192 Python \u2192 Postgres/Redis): ROC-AUC ~0.95 and sub-250 ms p95 latency locally.</li> <li>Feature store + low-latency CTR serving (Redis + FastAPI): P99 reads ~3\u201310 ms; AUC ~0.78 on synthetic.</li> <li>ML algorithms implemented from scratch: matched sklearn within ~1\u20133% accuracy on benchmark datasets.</li> <li>Postgres index recommender: analyzed pg_stat_statements and validated wins with EXPLAIN ANALYZE.</li> </ul>"},{"location":"#featured-projects","title":"Featured Projects","text":"<ul> <li>Real-Time Network Intrusion Detection</li> <li>CTR Feature Store + Low-Latency Serving</li> <li>ML Algorithms From Scratch</li> <li>PostgreSQL Index Recommender</li> </ul>"},{"location":"resume/","title":"Resume","text":"<p>Download the latest PDF: - Are Nanda Kishore \u2014 Resume (PDF)</p> <p>Tip: keep your resume one page, impact-first, and mirror keywords from target job descriptions.</p>"},{"location":"docs/about/","title":"About","text":""},{"location":"docs/about/#about","title":"About","text":"<p>I'm a graduate student in Artificial Intelligence at Indiana Wesleyan University, passionate about building reliable ML systems end-to-end: from data ingestion and feature engineering to training, serving, and monitoring.</p> <ul> <li>MS, Artificial Intelligence \u2014 Indiana Wesleyan University (in progress)</li> <li>BE, Computer Science \u2014 SRM University, Amaravati</li> <li>Interests: real-time streaming, feature stores, model evaluation, database internals, systems for ML.</li> </ul> <p>I value clarity, measurable impact, and clean engineering. Outside of work, I stay active with sports and enjoy contributing to open-source.</p>"},{"location":"docs/projects/nids-realtime/","title":"Real-Time Network Intrusion Detection (Kafka, Python, Postgres, Redis)","text":"<ul> <li>Repo: https://github.com/nanduare/nids-realtime</li> <li>Role: ML Engineer (end-to-end)</li> <li>Status: In progress</li> <li>Dates: 2025</li> </ul>"},{"location":"docs/projects/nids-realtime/#problem","title":"Problem","text":"<p>Detect and classify malicious network activity in real time with low latency and high precision.</p>"},{"location":"docs/projects/nids-realtime/#architecture","title":"Architecture","text":"<p>Kafka \u2192 Python consumer (sklearn model) \u2192 Redis (alerts buffer) + Postgres (persistent alerts)</p>"},{"location":"docs/projects/nids-realtime/#approach","title":"Approach","text":"<ul> <li>Synthetic NetFlow-like generator \u2192 feature engineering \u2192 RandomForest</li> <li>Streaming inference with checkpointed consumer</li> <li>Write predictions to Postgres for BI; Redis for fast dashboards</li> </ul>"},{"location":"docs/projects/nids-realtime/#results","title":"Results","text":"<ul> <li>ROC-AUC ~0.95 on holdout synthetic data</li> <li>p95 end-to-end latency &lt; 250 ms at ~100+ EPS locally</li> </ul>"},{"location":"docs/projects/nids-realtime/#how-to-run","title":"How to Run","text":"<ul> <li>Repo README includes docker-compose</li> <li>Start: <code>docker compose up --build</code></li> <li>Query: <code>SELECT pred_label, COUNT(*) FROM alerts GROUP BY 1 ORDER BY 2 DESC;</code></li> </ul>"},{"location":"docs/projects/nids-realtime/#next","title":"Next","text":"<ul> <li>Replace synthetic with CIC-IDS2017/UNSW-NB15</li> <li>Add Prometheus/Grafana monitoring and drift detection</li> </ul>"},{"location":"projects/ctr-feature-store/","title":"CTR Feature Store + Low-Latency Serving (Redis, FastAPI, sklearn)","text":"<ul> <li>Repo: https://github.com/nanduare/ctr-feature-store</li> <li>Role: ML Engineer (solo)</li> <li>Status: In progress</li> <li>Dates: 2025</li> </ul>"},{"location":"projects/ctr-feature-store/#problem","title":"Problem","text":"<p>Serve CTR predictions with millisecond latency and offline/online feature consistency.</p>"},{"location":"projects/ctr-feature-store/#architecture","title":"Architecture","text":"<p>Parquet (offline) \u2192 batch aggregates \u2192 Redis (online features) \u2192 FastAPI model serving</p>"},{"location":"projects/ctr-feature-store/#approach","title":"Approach","text":"<ul> <li>Build user/ad CTR aggregates offline and load into Redis hashes</li> <li>Train logistic regression with time-aware split and proper encodings</li> <li>Serve predictions via FastAPI using online features</li> </ul>"},{"location":"projects/ctr-feature-store/#results","title":"Results","text":"<ul> <li>P99 online feature reads ~3\u201310 ms (Redis)</li> <li>AUC ~0.78 on synthetic clickstream</li> </ul>"},{"location":"projects/ctr-feature-store/#how-to-run","title":"How to Run","text":"<ul> <li><code>docker compose up --build</code></li> <li><code>POST /predict</code> with user_id, ad_id, device_type, country (see README)</li> </ul>"},{"location":"projects/ml-algos/","title":"ML Algorithms From Scratch (NumPy)","text":"<ul> <li>Repo: https://github.com/nanduare/ml-algos-from-scratch</li> <li>Role: Author</li> <li>Status: In progress</li> <li>Dates: 2025</li> </ul>"},{"location":"projects/ml-algos/#scope","title":"Scope","text":"<p>Vectorized implementations of Logistic Regression (GD) and Decision Tree (CART), benchmarked vs sklearn.</p>"},{"location":"projects/ml-algos/#results","title":"Results","text":"<ul> <li>Accuracy within ~1\u20133% of sklearn on Breast Cancer dataset</li> <li>Transparent, well-commented implementations with a benchmarking harness</li> </ul>"},{"location":"projects/ml-algos/#run","title":"Run","text":"<p><code>python -m benchmarks.run_benchmarks</code></p>"},{"location":"projects/pg-index-recommender/","title":"PostgreSQL Query Log Analyzer &amp; Index Recommender","text":"<ul> <li>Repo: https://github.com/nanduare/pg-index-recommender</li> <li>Role: Systems/DB Engineer</li> <li>Status: In progress</li> <li>Dates: 2025</li> </ul>"},{"location":"projects/pg-index-recommender/#problem","title":"Problem","text":"<p>Find slow queries and recommend indexes to reduce p95 latency without regressions.</p>"},{"location":"projects/pg-index-recommender/#approach","title":"Approach","text":"<ul> <li>Collect from <code>pg_stat_statements</code></li> <li>Normalize SQL (sqlglot), extract predicates/joins</li> <li>Suggest index candidates, validate with <code>EXPLAIN ANALYZE</code></li> </ul>"},{"location":"projects/pg-index-recommender/#run","title":"Run","text":"<ul> <li><code>docker compose up -d</code> (starts Postgres with pg_stat_statements)</li> <li><code>python cli.py --dsn postgresql://pguser:pgpass@localhost:5433/pgdb</code></li> </ul>"}]}